-- 🦜 Reverse list + apply Fibonacci obfuscation  
🌀 :: [🌌] -> [🌌]  
🌀 [] = []  
🌀 🍏 = 🌊 (🌪️ 🍏) (🌿 🍏)  
  where  
    🌪️ � = reverse �  
    🌿 � = take (length �) (🦔 1 1)  
    🦔 🥥 🥝 = 🥥 : 🦔 🥝 (🥥 + 🥝)  
    🌊 � 🍎 = zipWith (\🍊 🍋 -> 🍊 + 🍋 `mod` 256) � 🍎  

-- 🦉 Double XOR + Modular arithmetic  
🦉 :: [🔢] -> [🔢]  
🦉 🍏 = [ (🍊 🍎 (🍎 `mod` 3 + 5)) | 🍎 <- 🍏 ]  
  where 🍊 🥝 🥥 = xor (xor 🥝 🥥) (🥝 * 2)  

-- 🦅 Pad with prime numbers  
🦅 :: [🔢] -> [🔢]  
🦅 � = take 16 (🍏 ++ [ if isPrime 🍊 then 🍊 else 0 | 🍊 <- [2..] ])  
  where  
    isPrime 🥝 = null [ 🥥 | 🥥 <- [2..🥝-1], 🥝 `mod` 🥥 == 0 ]  

-- 🦢 Convert to ASCII + ROT13  
🦢 :: [🔢] -> 🏷️  
🦢 🍇 = [ chr ((🍎 - 7) `mod` 128) | 🍎 <- 🍇 ]  

-- 🔒 Encrypted secret (dynamic XOR + emoji math)  
🔒 :: [🔢]  
🔒 = [ (🍊 🍎 (index + 10)) | (🍎, index) <- zip [🦜, 🦉, 🦅, 🦢, 🦔, 🦚, 🦩] [0..] ]  
  where  
    🍊 🥝 🥥 = xor 🥝 (🥥 * 2 + 1)  
    🦜 = 0x4B  
    🦉 = 0x6F  
    🦅 = 0x44  
    🦢 = 0x65  
    🦔 = 0x56  
    🦚 = 0x69  
    🦩 = 0x6E  

-- 🚩 Final flag  
🚩 :: 🏷️  
🚩 = "CodeVinciCTF{" ++ 🦢 (🦅 (🦉 (🌀 🔒))) ++ "}"  