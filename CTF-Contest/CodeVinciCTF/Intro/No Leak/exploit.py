from time import sleep
import curses
#import threading

import signal,sys

DEBUG = "DEBUG" in sys.argv

def cerrar(__,_):
    print("\nSaliendo")
    exit(1)

signal.signal(signal.SIGINT,cerrar)

def calculate_key(ct : bytes,know : bytes):
    return bytes(ct ^ k for ct,k in zip(ct,know))

def generar(length):
    max_num = 256 ** length
    return (f"{i:0{length * 2}x}" for i in range(max_num))


ct = bytes.fromhex("b3f0716f4a94ef6a6d6ce2b908d52d53c64696af67477dcade387770829324f23852fe78aff3266b5780")
know_text = b"CodeVinciCTF{F"
crypt = lambda ct,key : bytes(f^k for f,k in zip(ct, key))

#print("Texto cifrado: ",ct.hex())
sleep(1)

#print("Rompiendo llave...")
for data in generar(18 - len(know_text)):
    data = bytes.fromhex(data)
    key = calculate_key(ct,know_text) + data
    key *= len(ct) // len(key) + 1
    key = key[:len(ct)]
    print(crypt(ct,key))
    input()
    try:
        salida = crypt(ct,key).decode()
        print(f"\r{salida[salida.index('{'): salida.index('}')]}",end="",flush=True) 
        if salida.lower() in ("flag","fl4g","fl@g"):
            print("FLAG: ",salida)
            break

    except UnicodeDecodeError:
        if DEBUG:
            print(crypt(ct,key))
            input("Pulse cualquier tecla para continuar...")
        pass
print("Yosh!!!")

